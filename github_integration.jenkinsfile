pipeline {
    agent any
    /*environment{
        // environment variables to be defined as per chosen tools
    }*/
    stages {
        stage('Build') {
            steps {
                echo "Build started...!"
                // Using Maven to clean and package the project
                // sh 'mvn clean package'
            }
            post {
                always {
                    // sending an email notification after the tests are completed at this stage

                         mail to: "mariechoi430@gmail.com",
                         subject: "Build State Email Notification!",
                         body: "Build log attached!!!"
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo "Running unit and integration tests...!"
                // Using Maven to run unit and integration tests
                // sh 'mvn test'
            }
            post {
                always {
                // sending an email notification after the tests are completed at this stage
                        mail to: "mariechoi430@gmail.com",
                        subject: "Unit and Integration Tests: ${currentBuild.currentResult}",
                        body: "Unit and Integration Tests log attached!!!"
                }
            }
        }
        stage('Code Analysis') {
            steps {
                echo "Analysing code quality...!"
                // Use Maven for SonarQube analysis. The command below invokes the SonarCube Scanner to run an anlysis
                // sh 'mvn sonar:sonar'
                /* SonarQube is commonly used with Jenkins to perform continuous inspection of code quality within a CI/CD pipeline. Integrating SonarQube with Jenkins allows users to automatically analyse their code for potential bugs, vulnerabilities, and code smells whenever a build is triggered.
                */
            }
        }
        stage('Security Scan') {
            steps {
                echo "Performing security scan...!"
                // Using OWASP ZAP for security scanning
                /* OWASP ZAP (Zed Attack Proxy) is an open-source security tool maintained by the OWASP (Open Web Application Security Project). It is designed to find security vulnerabilities in web applications during the development and testing phases. 
                 */
                // running OWASP ZAP's baseline scan against a web application by using the command below
                // sh 'zap-baseline.py -t http://localhost'
            }
            post {
                always {
                         mail to: "mariechoi430@gmail.com",
                         subject: "Security Scan: ${currentBuild.currentResult}",
                         body: "Security Scan log attached!!!"
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo "Deploying to a Staging server...!"
                // Using AWS EC2 instances as a staging server suitable for customising, easy to scale and integerating with other AWS services. 
                // copying artifact to EC2 instance using scp(sample command below)
                /*
                sh """
                scp -i ~/.ssh/my-key.pem target/jenkins-artifact.jar ec2-user@$STAGING_EC2_INSTANCE_IP:/home/user/Documents/
                ssh -i ~/.ssh/my-key.pem ec2-user@$STAGING_EC2_INSTANCE_IP 'sudo systemctl restart myapp'
                """
                 */

            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo "Running integration tests on staging environment...!"
                // running the integration test script with the command below
                // sh 'integration_tests.sh'
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploying to Production server...!"
                // copying artifact to EC2 instance using scp sample command below
                /*
                sh """
                scp -i ~/.ssh/my-key.pem target/jenkins-artifact.jar ec2-user@$STAGING_EC2_INSTANCE_IP:/home/user/Documents/
                ssh -i ~/.ssh/my-key.pem ec2-user@$STAGING_EC2_INSTANCE_IP 'sudo systemctl restart myapp'
                """
                 */
            }
        }
        stage('Complete') {
            steps {
                echo "Congratulations! All Completed!!!"
            }
        }
    }
    
    post {
        always {
                 mail to: "mariechoi430@gmail.com",
                 subject: "Pipeline status: ${currentBuild.currentResult}",
                 body: "Build ${env.BUILD_NUMBER} finished with status: ${currentBuild.currentResult}"
        }
    }
}
